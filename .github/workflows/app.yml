name: Build Android App

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE'
  workflow_dispatch:

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ !startsWith(github.event.head_commit.message || '', '[skip ci]') }}

    steps:
      # ------------------------------
      # 1Ô∏è‚É£ Ê£ÄÂá∫‰ªìÂ∫ì‰ª£Á†Å
      # ------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # ------------------------------
      # 2Ô∏è‚É£ ÂÆâË£Ö Java ÁéØÂ¢É
      # ------------------------------
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # ------------------------------
      # 3Ô∏è‚É£ ÊâìÂç∞ÊûÑÂª∫‰∏ä‰∏ãÊñáÔºàË∞ÉËØïÁî®Ôºâ
      # ------------------------------
      - name: Print runner context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Message: ${{ github.event.head_commit.message }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repo: ${{ github.repository }}"

      # ------------------------------
      # 4Ô∏è‚É£ ÂÜôÂÖ•Á≠æÂêçÊñá‰ª∂
      # ------------------------------
      - name: Write keystore and signing.properties
        run: |
          echo "Preparing keystore..."
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > key.jks
            echo "‚úÖ Keystore restored from secret"
          else
            echo "‚ö†Ô∏è No keystore found, generating temporary debug key..."
            keytool -genkeypair -v \
              -keystore key.jks \
              -storetype JKS \
              -keyalg RSA \
              -keysize 2048 \
              -validity 10000 \
              -alias tempkey \
              -storepass temp1234 \
              -keypass temp1234 \
              -dname "CN=Temp, OU=Temp, O=Temp, L=Temp, ST=Temp, C=CN"
          fi

          echo "Writing signing.properties..."
          cat <<EOF > signing.properties
          KEYSTORE_FILE=../key.jks
          KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD || 'temp1234' }}
          KEY_ALIAS=${{ secrets.KEY_ALIAS || 'tempkey' }}
          KEYSTORE_ALIAS=${{ secrets.KEY_ALIAS || 'tempkey' }}
          KEY_PASSWORD=${{ secrets.KEY_PASSWORD || 'temp1234' }}
          KEYSTORE_ALIAS_PASSWORD=${{ secrets.KEY_PASSWORD || 'temp1234' }}
          EOF

          echo "‚úÖ signing.properties written successfully."
          cat signing.properties

      # ------------------------------
      # 5Ô∏è‚É£ ÁºìÂ≠ò Gradle ‰æùËµñ
      # ------------------------------
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-${{ hashFiles('**/build.gradle') }}
          restore-keys: gradle-deps-

      # ------------------------------
      # 6Ô∏è‚É£ ÁºìÂ≠òÊûÑÂª∫ÁºìÂ≠ò
      # ------------------------------
      - name: Cache Gradle build cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches/build-cache-*
          key: gradle-build-${{ github.sha }}
          restore-keys: gradle-build-

      # ------------------------------
      # 7Ô∏è‚É£ ÊûÑÂª∫ APK
      # ------------------------------
      - name: Build APKs
        id: buildWithGradle
        run: |
          echo "Configuring Gradle performance options..."
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties

          chmod +x gradlew
          echo "üöÄ Starting Gradle build..."
          ./gradlew :manager:assembleRelease :manager:assembleDebug --stacktrace

          releaseName=$(basename $(ls manager/build/outputs/apk/release/*.apk) .apk)
          debugName=$(basename $(ls manager/build/outputs/apk/debug/*.apk) .apk)

          echo "releaseName=$releaseName" >> $GITHUB_OUTPUT
          echo "debugName=$debugName" >> $GITHUB_OUTPUT
          echo "‚úÖ Build completed successfully."

      # ------------------------------
      # 8Ô∏è‚É£ ‰∏ä‰º† Release APK
      # ------------------------------
      - name: Upload Release APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.buildWithGradle.outputs.releaseName }}
          path: manager/build/outputs/apk/release/*.apk

      # ------------------------------
      # 9Ô∏è‚É£ ‰∏ä‰º† Debug APK
      # ------------------------------
      - name: Upload Debug APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.buildWithGradle.outputs.debugName }}
          path: manager/build/outputs/apk/debug/*.apk

      # ------------------------------
      # üîü ‰∏ä‰º†Ê∑∑Ê∑ÜÊò†Â∞ÑÊñá‰ª∂
      # ------------------------------
      - name: Upload Proguard mappings
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: mappings
          path: manager/build/outputs/mapping/release
