name: App

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ !startsWith(github.event.head_commit.message || '', '[skip ci]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Print runner context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Commit message: ${{ github.event.head_commit.message }}"
          echo "Actor: ${{ github.actor }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Repository: ${{ github.repository }}"

      - name: Write keystore
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        run: |
          echo "Writing keystore..."
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > key.jks

          touch signing.properties
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> signing.properties
          echo "KEYSTORE_ALIAS=${{ secrets.KEY_ALIAS }}" >> signing.properties
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> signing.properties
          echo "KEYSTORE_FILE=../key.jks" >> signing.properties

          # 双写一份,确保兼容 KEY_PASSWORD 与 KEYSTORE_ALIAS_PASSWORD 两种变量名
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> signing.properties
          echo "KEYSTORE_ALIAS_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> signing.properties

          echo "signing.properties content:"
          cat signing.properties

      - name: Write temporary key
        if: hashFiles('key.jks') == ''
        run: |
          echo "Generating temporary debug key..."
          keytool -genkeypair -v \
            -keystore key.jks \
            -storetype JKS \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias tempkey \
            -storepass temp1234 \
            -keypass temp1234 \
            -dname "CN=Temp, OU=Temp, O=Temp, L=Temp, ST=Temp, C=CN"

          echo "KEYSTORE_PASSWORD=temp1234" >> signing.properties
          echo "KEYSTORE_ALIAS=tempkey" >> signing.properties
          echo "KEY_ALIAS=tempkey" >> signing.properties
          echo "KEY_PASSWORD=temp1234" >> signing.properties
          echo "KEYSTORE_ALIAS_PASSWORD=temp1234" >> signing.properties
          echo "KEYSTORE_FILE=../key.jks" >> signing.properties

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-app-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            gradle-deps

      - name: Cache Gradle Build
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/build-cache-*
          key: gradle-builds-app-${{ github.sha }}
          restore-keys: |
            gradle-builds

      - name: Setup Gradle properties
        run: |
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=false' >> gradle.properties
          echo 'org.gradle.vfs.watch=false' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8' >> gradle.properties
          echo 'org.gradle.daemon=false' >> gradle.properties
          echo 'org.gradle.configureondemand=false' >> gradle.properties
          echo 'android.enableR8.fullMode=false' >> gradle.properties
          echo "Gradle properties:"
          cat gradle.properties
      
      - name: Fix build.gradle for CI
        run: |
          echo "Patching manager/build.gradle to prevent collapseReleaseResourceNames failure..."
          
          # 备份原文件
          cp manager/build.gradle manager/build.gradle.backup
          
          # 使用 Python 进行精确的多行替换
          python3 << 'PYTHON_SCRIPT'
          import re
          
          with open('manager/build.gradle', 'r', encoding='utf-8') as f:
              content = f.read()
          
          # 在 exec { 之前添加文件检查
          # 匹配 exec { 并在其前面添加检查逻辑
          pattern = r'(\s+)(exec\s*\{[^}]*commandLine[^}]*aapt2[^}]*\})'
          
          replacement = r'''\1def resourceFile = file("${buildDir}/intermediates/optimized_processed_res/release/resources-release-optimize.ap_")
\1if (!resourceFile.exists()) {
\1    logger.warn("CI FIX: Resource file not found, skipping collapse")
\1    return
\1}
\1\2'''
          
          new_content = re.sub(pattern, replacement, content, flags=re.DOTALL)
          
          # 如果替换成功(内容有变化),写入文件
          if new_content != content:
              with open('manager/build.gradle', 'w', encoding='utf-8') as f:
                  f.write(new_content)
              print("✓ Successfully patched build.gradle")
          else:
              # 如果上述方法没有匹配,尝试简单的行级替换
              lines = content.split('\n')
              new_lines = []
              for i, line in enumerate(lines):
                  new_lines.append(line)
                  # 在包含 'aapt2' 的 exec 调用前添加检查
                  if 'exec' in line and i < len(lines) - 1:
                      # 查看接下来几行是否包含 aapt2
                      next_lines = '\n'.join(lines[i:min(i+10, len(lines))])
                      if 'aapt2' in next_lines and 'optimize' in next_lines:
                          indent = len(line) - len(line.lstrip())
                          spaces = ' ' * indent
                          new_lines.insert(-1, f'{spaces}// CI FIX: Added file existence check')
                          new_lines.insert(-1, f'{spaces}def resourceFile = file("${{buildDir}}/intermediates/optimized_processed_res/release/resources-release-optimize.ap_")')
                          new_lines.insert(-1, f'{spaces}if (!resourceFile.exists()) {{ return }}')
                          print("✓ Applied fallback patch")
                          break
              
              with open('manager/build.gradle', 'w', encoding='utf-8') as f:
                  f.write('\n'.join(new_lines))
          
          PYTHON_SCRIPT
          
          echo "Showing modified section:"
          grep -A 5 -B 5 "CI FIX" manager/build.gradle || echo "Patch may not have been applied, continuing anyway..."

      - name: Clean build
        run: |
          chmod +x gradlew
          ./gradlew clean --no-daemon

      - name: Build with Gradle
        id: buildWithGradle
        run: |
          # 先构建 debug 版本测试
          echo "Building debug APK..."
          ./gradlew :manager:assembleDebug --no-daemon --stacktrace
          
          # 再构建 release 版本
          echo "Building release APK..."
          ./gradlew :manager:assembleRelease --no-daemon --stacktrace --max-workers=2

          releaseName=$(ls manager/build/outputs/apk/release/*.apk | awk -F '/' '{print $NF}' | sed 's/.apk$//')
          debugName=$(ls manager/build/outputs/apk/debug/*.apk | awk -F '/' '{print $NF}' | sed 's/.apk$//')
          echo "releaseName=$releaseName" >> $GITHUB_OUTPUT
          echo "debugName=$debugName" >> $GITHUB_OUTPUT

      - name: Upload release
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.buildWithGradle.outputs.releaseName }}
          path: "manager/build/outputs/apk/release/*.apk"

      - name: Upload debug
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.buildWithGradle.outputs.debugName }}
          path: "manager/build/outputs/apk/debug/*.apk"

      - name: Upload mappings
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: mappings
          path: "manager/build/outputs/mapping/release"
